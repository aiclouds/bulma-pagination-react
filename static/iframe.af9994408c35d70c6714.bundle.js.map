{"version":3,"file":"static/iframe.af9994408c35d70c6714.bundle.js","sources":["webpack:///./index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Page = ({ currentPage, index, onChange, className }) => (\n  <li>\n    <a\n      className={`pagination-link ${className} ${(currentPage === index ||\n        (index === 1 && !currentPage)) &&\n        'is-current'}`}\n      aria-label={`Goto page ${index}`}\n      aria-current={index === currentPage && 'page'}\n      onClick={() => onChange(index)}\n    >\n      {index}\n    </a>\n  </li>\n);\n\nPage.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  index: PropTypes.number.isRequired,\n  className: PropTypes.string,\n  onChange: PropTypes.func.isRequired\n};\n\nPage.defaultProps = {\n  className: ''\n};\n\nconst Ellipses = () => (\n  <li>\n    <span className=\"pagination-ellipsis\">&hellip;</span>\n  </li>\n);\n\nexport const getVisiblePages = (visibleRadius, currentPage, maxPages) => {\n  const visiblePages = [];\n\n  let start = currentPage - visibleRadius;\n  let end = currentPage + visibleRadius;\n\n  if (start < 1) {\n    start = 1;\n    end = start + visibleRadius * 2;\n  }\n\n  if (end > maxPages) {\n    start = maxPages - visibleRadius * 2;\n    end = maxPages;\n  }\n\n  if (visibleRadius * 2 + 1 > maxPages) {\n    start = 1;\n    end = maxPages;\n  }\n\n  for (let i = start; i <= end; i++) {\n    visiblePages.push(i);\n  }\n\n  return visiblePages;\n};\n\nconst Pagination = ({\n  pages,\n  currentPage,\n  visibleRadius,\n  className,\n  isRounded,\n  isSmall,\n  isMedium,\n  isLarge,\n  isCentered,\n  isRight,\n  prevClassName,\n  nextClassName,\n  linkClassName,\n  listClassName,\n  onChange\n}) => {\n  const visiblePages = getVisiblePages(visibleRadius, currentPage, pages);\n  const pagesComponents = [];\n\n  const classes = [\n    isRounded && 'is-rounded',\n    isSmall && 'is-small',\n    isMedium && 'is-medium',\n    isLarge && 'is-large',\n    isCentered && 'is-centered',\n    isRight && 'is-right'\n  ].filter(Boolean);\n\n  if (visiblePages[0] >= 2) {\n    pagesComponents.push(\n      <Page\n        key=\"page-1\"\n        index={1}\n        currentPage={currentPage}\n        onChange={onChange}\n      />\n    );\n\n    if (visiblePages[0] !== 2) {\n      pagesComponents.push(<Ellipses key=\"ellipses-1\" />);\n    }\n  }\n\n  visiblePages.map(page =>\n    pagesComponents.push(\n      <Page\n        key={`page-${page}`}\n        index={page}\n        currentPage={currentPage}\n        onChange={onChange}\n      />\n    )\n  );\n  if (currentPage <= pages - visibleRadius - 1 && visiblePages.length < pages) {\n    if (currentPage < pages - visibleRadius - 1) {\n      pagesComponents.push(<Ellipses key=\"ellipses-2\" />);\n    }\n\n    pagesComponents.push(\n      <Page\n        key={`page-${pages}`}\n        className={linkClassName}\n        index={pages}\n        currentPage={currentPage}\n        onChange={onChange}\n      />\n    );\n  }\n\n  return (\n    <nav\n      className={`pagination-container pagination ${classes.join(\n        ' '\n      )} ${className}`}\n      role=\"navigation\"\n      aria-label=\"pagination\"\n    >\n      <a\n        disabled={currentPage === 1}\n        className={`pagination-previous nav ${prevClassName}`}\n        onClick={() => onChange(currentPage - 1)}\n      >\n        Previous\n      </a>\n      <a\n        disabled={currentPage === pages}\n        className={`pagination-next nav ${nextClassName}`}\n        onClick={() => onChange(currentPage + 1)}\n      >\n        Next page\n      </a>\n\n      <ul className={`pagination-list ${listClassName}`}>{pagesComponents}</ul>\n    </nav>\n  );\n};\n\nPagination.propTypes = {\n  pages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number,\n  visibleRadius: PropTypes.number,\n  className: PropTypes.string,\n  prevClassName: PropTypes.string,\n  nextClassName: PropTypes.string,\n  linkClassName: PropTypes.string,\n  listClassName: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  isRounded: PropTypes.bool,\n  isSmall: PropTypes.bool,\n  isMedium: PropTypes.bool,\n  isLarge: PropTypes.bool,\n  isCentered: PropTypes.bool,\n  isRight: PropTypes.bool\n};\n\nPagination.defaultProps = {\n  currentPage: 1,\n  visibleRadius: 1,\n  className: '',\n  prevClassName: '',\n  nextClassName: '',\n  linkClassName: '',\n  listClassName: '',\n  isRounded: false,\n  isSmall: false,\n  isMedium: false,\n  isLarge: false,\n  isCentered: false,\n  isRight: false\n};\n\nexport default Pagination;\n"],"mappings":"AAAA","sourceRoot":""}